
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd 
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"
        default-autowire="byName">

    <!-- to define where the beans are, so that the IOC container will detect them.-->
    <!-- jak se rtady udela chyba v nazvu, tak to nebude schopne najit serviceDAO, protoze nevi kde hledat
    Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.1:java (default-cli) on project hibernatespring: An exception occured while executing the Java class. null: InvocationTargetException: No bean named 'employeeService' is defined -> [Help 1]
    -->

    <context:component-scan base-package="cz.roman.spanek.courses.hibernate.*" />
    <!-- make Spring is @Transactional-aware and can detect the @Transactional annotations to configure the appropriate beans with transactional behavior.-->  
    <tx:annotation-driven/>
  
  
  
    <!-- aby nam to nepadalo je treba mit jinou tridu rpo praci s db -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="org.postgresql.Driver" />
        <property name="url" value="jdbc:postgresql://localhost:5432/rdb_2018" />
        <property name="username" value="rdb_2018" />
        <property name="password" value="rdb_2018" />
    </bean>
    
    <!-- musime pridat dependency jinak to bude hlasut chybu 
    c3p0 is an easy-to-use library for making traditional JDBC drivers "enterprise-ready" by augmenting them with functionality defined by the jdbc3 spec and the optional extensions to jdbc2. In particular, c3p0 provides several useful services:

Classes which adapt traditional DriverManager-based JDBC drivers to the newer javax.sql.DataSource scheme for acquiring database Connections.
Transparent pooling of Connection and PreparedStatements behind DataSources which can "wrap" around traditional drivers or arbitrary unpooled DataSources.
The library tries hard to get the details right:

c3p0 DataSources are both Referenceable and Serializable, and are thus suitable for binding to a wide-variety of JNDI-based naming services.
Statement and ResultSets are carefully cleaned up when pooled Connections and Statements are checked in, to prevent resource- exhaustion when clients use the lazy but common resource-management strategy of only cleaning up their Connections....
The library adopts the approach defined by the JDBC 2 and 3 specification (even where these conflict with the library author's preferences). DataSources are written in the JavaBean style, offering all the required and most of the optional properties (as well as some non-standard ones), and no-arg constructors. All JDBC-defined internal interfaces are implemented (ConnectionPoolDataSource, PooledConnection, ConnectionEvent-generating Connections, etc.) You can mix c3p0 classes with compliant third-party implementations (although not all c3p0 features will work with external implementations).
c3p0 now fully supports the JDBC4 specification.
c3p0 hopes to provide DataSource implementations more than suitable for use by high-volume "J2EE enterprise applications". Please provide feedback, bug-fixes, etc.!
    -->
    <!-- bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass">
			<value>com.mysql.jdbc.Driver</value>
		</property>
		<property name="jdbcUrl">
			<value>jdbc:mysql://sirius.mti.tul.cz:3306/hibernatecourse</value>
		</property>
		<property name="user">
			<value>hibernatecourse</value>
		</property>
		<property name="password">
			<value>hibernatecourse</value>
		</property>
    </bean-->
    

    <!--
        the sessionFactory bean we must define the SessionFactory class. The SessionFactory class is a thread-safe object that is instantiated once to serve the entire application. The SessionFactory is used to create Sessions. A Session is used to get a physical connection with a database. The Session object is instantiated each time an interaction is needed with the database. Persistent objects are saved and retrieved through a Session object.
        Because its main goal was to get a Hibernate session tied to the current Spring transaction, when SessionFactory.getCurrentSession() didn't exist. Since it now exists (and for a long time: HibenateTemplate usage is discouraged even in the hibernate3 package), there is no reason to use this Spring-specific class instead of using SessionFactory.getCurrentSession() to get a session tied to the current Spring transaction.
        If you use Spring, then you should use its declarative transaction management, which allows you to avoid opening, committing, closing and flushing. It's all done by Spring automatically:    
    -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="annotatedClasses">
            <list>
                <value>cz.roman.spanek.courses.hibernate.model.Omezeni</value>
                <value>cz.roman.spanek.courses.hibernate.model.Kontakt</value>
                <value>cz.roman.spanek.courses.hibernate.model.Firma</value>
                <value>cz.roman.spanek.courses.hibernate.model.Silnice</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop> 
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>
  
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager" 
          p:sessionFactory-ref="sessionFactory">
    </bean>
</beans>